import os
import logging
import requests
import json
from dotenv import load_dotenv

load_dotenv()

# Set up logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Set up Twilio client
from_number = os.environ['TWILIO_NUMBER']
to_number = os.environ['WHATSAPP_RECIPIENT_NUMBER']
account_sid = os.environ['TWILIO_ACCOUNT_SID']
auth_token = os.environ['TWILIO_AUTH_TOKEN']
client = Client(account_sid, auth_token)

# Create a database to store product information
import sqlite3
from contextlib import closing

def init_db():
    with closing(connect_db()) as db:
        with open('schema.sql') as f:
            db.cursor().executescript(f.read())
        db.commit()

def connect_db():
    return sqlite3.connect(app.config['DATABASE'])

def add_product(name, marketplace, buying_price, selling_price, selling_fees, shipping_cost, expenses, net_profit):
    with closing(connect_db()) as db:
        db.execute('insert into products (name, marketplace, buying_price, selling_price, selling_fees, shipping_cost, expenses, net_profit) values (?, ?, ?, ?, ?, ?, ?, ?)',
                     [name, marketplace, buying_price, selling_price, selling_fees, shipping_cost, expenses, net_profit])
        db.commit()

def remove_product(name):
    with closing(connect_db()) as db:
        db.execute('delete from products where name = ?', [name])
        db.commit()

def get_all_products():
    with closing(connect_db()) as db:
        cur = db.execute('select name, marketplace, buying_price, selling_price, selling_fees, shipping_cost, expenses, net_profit from products')
        products = [dict(name=row[0], marketplace=row[1], buying_price=row[2], selling_price=row[3], selling_fees=row[4], shipping_cost=row[5], expenses=row[6], net_profit=row[7]) for row in cur.fetchall()]
    return products

def calculate_net_profit(buying_price, selling_price, selling_fees, shipping_cost, expenses):
    gross_profit = selling_price - buying_price - selling_fees - shipping_cost
    net_profit = gross_profit - expenses
    return net_profit

# Function to fetch product details from Walmart API
def get_walmart_product_details(product_name):
    api_key = os.environ['WALMART_API_KEY']
    url = f"https://api.walmart.com/v3/search?apiKey={api_key}&
